#!/bin/bash

printf "Y\n" | kubeadm reset
rm -rf /etc/cni /etc/kubernetes /var/lib/dockershim /var/lib/etcd /var/lib/kubelet /var/run/kubernetes ~/.kube/*

modprobe br_netfilter

cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF

kubeadm config images pull

export ENCRYPTION_CONFIG_FOLDER=/etc/kubernetes/pki
export ENCRYPTION_CONFIG=encryption-provider-config.yaml
mkdir -p $ENCRYPTION_CONFIG_FOLDER
cat << EOF > $ENCRYPTION_CONFIG_FOLDER/$ENCRYPTION_CONFIG
apiVersion: apiserver.config.k8s.io/v1
kind: EncryptionConfiguration
resources:
  - resources:
    - secrets
    providers:
    - aescbc:
        keys:
        - name: key1
          secret: Ti70f5txp+VbKnPqmxsnFg/XJyojXlE2tecQnTYmxS4=
EOF


cat << EOF > kubeadm.yaml
apiVersion: kubeadm.k8s.io/v1beta1
kind: ClusterConfiguration
networking:
  podSubnet: 10.244.0.0/16
scheduler:
  extraArgs:
    policy-config-file: /etc/edge-ai/scheduler/sched-policy-k8s.json
    profiling: "false"
  extraVolumes:
  - name: kubeconfig-ros
    hostPath: "/etc/edge-ai/scheduler/sched-policy-k8s.json"
    mountPath: "/etc/edge-ai/scheduler/sched-policy-k8s.json"
    readOnly: true
    pathType: FileOrCreate
apiServer:
  extraArgs:
    encryption-provider-config: $ENCRYPTION_CONFIG_FOLDER/$ENCRYPTION_CONFIG
    profiling: "false"
    audit-log-path: "/var/log/apiserver/audit.log"
    audit-log-maxage: "30"
    audit-log-maxbackup: "10"
    audit-log-maxsize: "100"
    enable-admission-plugins: "PodSecurityPolicy,NodeRestriction"
controllerManager:
  extraArgs:
    profiling: "false"
EOF

kubeadm init 	--config=kubeadm.yaml --v=5


echo "resolvConf: /etc/resolv_kube.conf" >> /var/lib/kubelet/config.yaml
echo "readOnlyPort: 0" >> /var/lib/kubelet/config.yaml
cat << EOF > /etc/resolv_kube.conf
# Generated by Connection Manager
nameserver ::1
EOF
systemctl restart kubelet

mkdir -p $HOME/.kube && \
cp /etc/kubernetes/admin.conf $HOME/.kube/config && \
chown $(id -u):$(id -g) $HOME/.kube/config



kubectl create -f - << EOF
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: default-psp-psp
  annotations:
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: '*'
spec:
  privileged: true
  allowPrivilegeEscalation: true
  allowedCapabilities:
  - '*'
  volumes:
  - '*'
  hostNetwork: true
  hostPorts:
  - min: 0
    max: 65535
  hostIPC: true
  hostPID: true
  runAsUser:
    rule: 'RunAsAny'
  seLinux:
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'RunAsAny'
  fsGroup:
    rule: 'RunAsAny'
---
# Cluster role which grants access to the default pod security policy
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: default-psp
rules:
- apiGroups:
  - policy
  resourceNames:
  - default-psp-psp
  resources:
  - podsecuritypolicies
  verbs:
  - use
---
# Cluster role binding for default pod security policy granting all authenticated users access
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: default-psp
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: default-psp
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: system:authenticated
EOF




kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml


